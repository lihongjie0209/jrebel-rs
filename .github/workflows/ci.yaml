name: JRebel-RS CI/CD Pipeline

on:
  # 代码推送触发
  push:
    branches: [ master, main, develop ]
    tags:
      - 'v*'
  
  # PR触发
  pull_request:
    branches: [ master, main ]
  
  # 支持手动触发
  workflow_dispatch:
    inputs:
      push_to_dockerhub:
        description: '是否推送到DockerHub'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      create_release:
        description: '是否创建GitHub Release'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# 设置workflow权限
permissions:
  contents: write  # 允许创建release和上传文件
  packages: write  # 允许推送Docker镜像
  pull-requests: read  # 读取PR信息

env:
  CARGO_TERM_COLOR: always
  DOCKERHUB_NAMESPACE: lihongjie0209
  IMAGE_NAME: jrebel-rs

jobs:
  test:
    name: 运行测试
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 安装Rust工具链
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: 设置Rust缓存
      uses: Swatinem/rust-cache@v2
      


      
    - name: 运行单元测试
      run: cargo test --verbose

  build:
    name: 跨平台构建
    needs: [test]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-amd64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 安装Rust工具链
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: 设置Rust缓存
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}
    
    - name: 安装交叉编译工具 (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    
    - name: 构建二进制文件
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: 准备发布文件 (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts
        binary_name="jrebel-rs"
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          binary_name="jrebel-rs.exe"
        fi
        
        cp target/${{ matrix.target }}/release/$binary_name artifacts/
        cd artifacts
        tar -czf ../jrebel-rs-${{ matrix.name }}.tar.gz *
    
    - name: 准备发布文件 (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path artifacts
        Copy-Item target\${{ matrix.target }}\release\jrebel-rs.exe artifacts\
        Compress-Archive -Path artifacts\* -DestinationPath jrebel-rs-${{ matrix.name }}.zip
    
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: jrebel-rs-${{ matrix.name }}
        path: |
          jrebel-rs-${{ matrix.name }}.tar.gz
          jrebel-rs-${{ matrix.name }}.zip
        retention-days: 30
    
    - name: 上传Linux AMD64二进制文件供Docker使用
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      uses: actions/upload-artifact@v4
      with:
        name: jrebel-rs-linux-binary
        path: target/${{ matrix.target }}/release/jrebel-rs
        retention-days: 1

  docker-build:
    name: 构建Docker镜像
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.push_to_dockerhub == 'true'
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 下载Linux二进制文件
      uses: actions/download-artifact@v4
      with:
        name: jrebel-rs-linux-binary
        path: ./
    
    - name: 创建简化Dockerfile
      run: |
        cat > Dockerfile.optimized << 'EOF'
        FROM debian:bookworm-slim
        
        RUN apt-get update && apt-get install -y \
            ca-certificates \
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app
        
        # 复制预编译的二进制文件
        COPY jrebel-rs /app/jrebel-rs
        RUN chmod +x /app/jrebel-rs
        
        # 创建非root用户
        RUN useradd -r -s /bin/false jrebel
        RUN chown jrebel:jrebel /app/jrebel-rs
        USER jrebel
        
        EXPOSE 12345
        
        CMD ["./jrebel-rs"]
        EOF
    
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录DockerHub
      if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
        labels: |
          org.opencontainers.image.title=JRebel License Active Server
          org.opencontainers.image.description=JRebel许可证激活服务器 - Rust实现版本，高性能的JRebel许可证激活服务
          org.opencontainers.image.vendor=lihongjie0209
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
    
    - name: 构建和推送Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.optimized
        platforms: linux/amd64
        push: ${{ startsWith(github.ref, 'refs/tags/v') || github.event.inputs.push_to_dockerhub == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: 创建GitHub Release
    needs: [build, docker-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        pattern: jrebel-rs-*
        merge-multiple: false
    
    - name: 整理发布文件
      run: |
        mkdir -p release-files
        find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
          if [[ -f "$file" ]]; then
            cp "$file" release-files/
          fi
        done
        ls -la release-files/
    
    - name: 生成发布说明
      id: release-notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ -z "$VERSION" ]]; then
          VERSION="manual-$(date +%Y%m%d-%H%M%S)"
        fi
        
        cat > release-notes.md << EOF
        # JRebel-RS $VERSION 发布
        
        ## 🚀 新版本特性
        
        这是JRebel License Active Server的Rust实现版本，提供高性能的JRebel许可证激活服务。
        
        ## 📦 下载说明
        
        ### 二进制文件
        - **Linux AMD64**: \`jrebel-rs-linux-amd64.tar.gz\`
        - **Linux ARM64**: \`jrebel-rs-linux-arm64.tar.gz\`  
        - **Windows AMD64**: \`jrebel-rs-windows-amd64.zip\`
        - **macOS AMD64**: \`jrebel-rs-macos-amd64.tar.gz\`
        - **macOS ARM64**: \`jrebel-rs-macos-arm64.tar.gz\`
        
        ### Docker镜像
        \`\`\`bash
        docker pull ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${VERSION#v}
        \`\`\`
        
        ## 🔧 使用方法
        
        ### 二进制文件使用
        \`\`\`bash
        # 解压文件
        tar -xzf jrebel-rs-linux-amd64.tar.gz  # Linux
        # unzip jrebel-rs-windows-amd64.zip     # Windows
        
        # 运行服务
        ./jrebel-rs --port 12345 --log-level info
        \`\`\`
        
        ### Docker使用
        \`\`\`bash
        # 基础运行
        docker run -d -p 12345:12345 ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${VERSION#v}
        
        # 自定义配置
        docker run -d -p 8080:8080 \\
          -e JREBEL_PORT=8080 \\
          -e JREBEL_LOG_LEVEL=debug \\
          -e JREBEL_OFFLINE_DAYS=60 \\
          ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${VERSION#v}
        \`\`\`
        
        ## 🔗 相关链接
        
        - [📚 使用文档](https://github.com/${{ github.repository }}/blob/master/README.md)
        - [🐳 DockerHub](https://hub.docker.com/r/${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }})
        - [🔧 配置参考](https://github.com/${{ github.repository }})
        
        ## 🏷️ 版本信息
        
        - **提交**: \`${{ github.sha }}\`
        - **构建时间**: \`$(date -u +"%Y-%m-%dT%H:%M:%SZ")\`
        - **支持平台**: Linux (AMD64/ARM64), Windows (AMD64), macOS (AMD64/ARM64)
        EOF
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: 创建Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.release-notes.outputs.version }}
        name: JRebel-RS ${{ steps.release-notes.outputs.version }}
        body_path: release-notes.md
        files: release-files/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        make_latest: ${{ !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-cloud-run:
    name: 部署到GCP Cloud Run
    needs: [docker-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && success()
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 配置GCP身份验证
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: 设置Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: 提取版本号
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "image_uri=${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:$VERSION" >> $GITHUB_OUTPUT
    
    - name: 部署到Cloud Run
      run: |
        echo "🚀 开始部署JRebel-RS到GCP Cloud Run..."
        
        gcloud run deploy ${{ vars.CLOUD_RUN_SERVICE_NAME || 'jrebel-rs' }} \
          --image=${{ steps.version.outputs.image_uri }} \
          --platform=managed \
          --region=${{ vars.GCP_REGION || 'asia-east1' }} \
          --allow-unauthenticated \
          --port=12345 \
          --memory=${{ vars.CLOUD_RUN_MEMORY || '512Mi' }} \
          --cpu=${{ vars.CLOUD_RUN_CPU || '1' }} \
          --concurrency=${{ vars.CLOUD_RUN_CONCURRENCY || '80' }} \
          --max-instances=${{ vars.CLOUD_RUN_MAX_INSTANCES || '10' }} \
          --min-instances=${{ vars.CLOUD_RUN_MIN_INSTANCES || '0' }} \
          --timeout=${{ vars.CLOUD_RUN_TIMEOUT || '300' }} \
          --set-env-vars="JREBEL_LOG_LEVEL=${{ vars.JREBEL_LOG_LEVEL || 'info' }},JREBEL_PORT=12345,JREBEL_OFFLINE_DAYS=${{ vars.JREBEL_OFFLINE_DAYS || '30' }}" \
          --quiet
        
        echo "✅ JRebel-RS Cloud Run部署完成"
    
    - name: 获取服务URL
      id: service-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ vars.CLOUD_RUN_SERVICE_NAME || 'jrebel-rs' }} \
          --region=${{ vars.GCP_REGION || 'asia-east1' }} \
          --format='value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🌐 JRebel服务URL: $SERVICE_URL"
    
    - name: 验证部署
      run: |
        SERVICE_URL="${{ steps.service-url.outputs.url }}"
        echo "🧪 测试JRebel服务健康状态..."
        
        sleep 30
        
        if curl -f "$SERVICE_URL/health" > /dev/null 2>&1; then
          echo "✅ JRebel服务健康检查通过"
        else
          echo "❌ JRebel服务健康检查失败"
          exit 1
        fi